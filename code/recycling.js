/**
Name: Jikke van den Ende
Student number: 10787593
This file contains the function used for the barchart that shows the plastics
generation from the USA for 1960 until 2015. It shows the parts from the
generation that is recycled, landfilled or combusted.
*/

function makeBarchart() {
/**
This function creates the barchart.
*/

  d3v5.json("recycling-numbers.json").then(function(data) {

    var margin = {top: 20, right: 100, bottom: 30, left: 40},
        width = document.getElementById('barchart').offsetWidth,
        height = 400,
        parseTime = d3v5.timeParse("%Y"),
        usedcolors = ["#66c2a5","#fc8d62","#8da0cb"],
        colors = d3v5.scaleOrdinal(["#66c2a5","#fc8d62","#8da0cb","#e78ac3",
                             "#a6d854","#ffd92f"]);

    // Piece of code inspired on Mike Bostock's block.
    // It comes from https://bl.ocks.org/mbostock/b5935342c6d21928111928401e2c8608.
    // It stacks the data into a correct format for the layerd bars.
    var stackedData = d3v5.stack()
          .keys(['Recycled', 'Combustion with Energy Recovery', 'Landfilled'])
          .offset(d3v5.stackOffsetDivergin)
          (data);

    var xScale = d3v5.scaleBand()
            .domain(data.map(function(d) { return d['Year']}))
            .rangeRound([margin.left, width - margin.right])
            .padding(0.1);

    var yScale = d3v5.scaleLinear()
            .domain([d3v5.min(stackedData, stackMin), d3v5.max(stackedData, stackMax)])
            .rangeRound([height - margin.bottom, margin.top]);

    var svg = d3v5.select('#recycling')
                .append('svg')
                .attr('width', width)
                .attr('height', height);

    // Create the information text-center which appears when a user clicks on a bar.
    var info = d3v5.select('#recycle-info')
          .style('display', 'none');

    info.append("text")
          .attr("x", 10)
          .attr('font-size', '10px')
          .attr("dy", ".31em");

    // Append the bars to the svg
    svg.append("g")
      .selectAll("g")
      .data(stackedData)
      .enter().append("g")
        .attr("fill", function(d) { return colors(d.key); })
      .selectAll("rect")
      .data(function(d) { return d; })
      .enter().append("rect")
        .attr("width", xScale.bandwidth)
        .attr("x", function(d) { return xScale(d.data['Year']); })
        .attr("y", function(d) { return yScale(d[1]); })
        .attr("height", function(d) { return yScale(d[0]) - yScale(d[1]); })
        .on("mouseover", function(d) {
          info.style('display', null);
          d3v5.select(this)
              .attr('stroke', 'red');
        })
        .on("mouseout", function(d) {
          d3v5.select(this)
              .attr('stroke', 'none');
        })
        .on("mousedown", function(d) {
          info.select("text").text(function() {
            if (d[0] == 0) {
                  return  'In ' + d.data['Year'] + ', ' + d.data['Generation']
                    +  ' thousand of tonnes of plastic was generated by the USA. '
                    + 'From this amount, '
                    + d.data['Recycled'] + ' thousand of tonnes was recycled.'
                    + ' This means the process of reprocessing plastic waste'
                    + ' into usable new products. It is not possible with any'
                    + 'kind of plastics. '
            } else if (d[1] == d.data['Generation']) {
                  return  'In ' + d.data['Year'] + ', ' + d.data['Generation']
                    +  ' thousand of tonnes of plastic was generated by the USA. '
                    + 'From this amount, '
                    + d.data['Landfilled'] + ' thousand of tonnes was landfilled.'
                    + ' This means that it was dumped on a dumping site, but also'
                    + ' it could have been mismanaged (for example in rivers'
                    + ' and oceans).'
            } else {
                  return  'In ' + d.data['Year'] + ', ' + d.data['Generation']
                    +  ' thousand of tonnes of plastic was generated by the USA. '
                    + 'From this amount, '
                    + d.data['Combustion with Energy Recovery'] + ' thousand of '
                    + 'tonnes was combusted with Energy Recovery. This means the'
                    + ' conversion of plastic waste into usable heat, electricity or'
                    + ' fuel through a variaty of processes. '
            }

          });
        });

    // Create x-axis
    svg.append("g")
        .attr("transform", "translate(0," + yScale(0) + ")")
        .call(d3v5.axisBottom(xScale));

    // Create y-axis
    svg.append("g")
        .attr("transform", "translate(" + margin.left + ",0)")
        .call(d3v5.axisLeft(yScale));


    // Create Legend for barchart
    var legend = svg.selectAll(".legend")
        .data(usedcolors)
        .enter().append("g")
        .attr("class", "legend")
        .attr("transform", function(d, i) { return "translate(-70," + i * 19 + ")"; });

    legend.append("rect")
        .attr("x", width - 18)
        .attr("width", 18)
        .attr("height", 18)
        .style("fill", function(d, i) {return usedcolors.slice().reverse()[i];});

    legend.append("text")
          .attr("x", width + 5)
          .attr("y", 9)
          .attr("dy", ".35em")
          .attr('font-size', '8pt')
          .style("text-anchor", "start")
          .text(function(d, i) {
            switch (i) {
              case 0: return "Landfilled";
              case 1: return "Recycled";
              case 2: return "Combustion";
            }
          });


    // Function for finding the minimum and maximum datapoints of the data.
    // It comes from https://bl.ocks.org/mbostock/b5935342c6d21928111928401e2c8608.
    function stackMin(serie) {
      return d3v5.min(serie, function(d) { return d[0]; });
    }

    function stackMax(serie) {
      return d3v5.max(serie, function(d) { return d[1]; });
    }

  });

}
